[
  {
    "objectID": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html",
    "href": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html",
    "title": "pytorch tensor cheatsheet",
    "section": "",
    "text": "Tensors are a specialized data structure that are very similar to arrays and matrices. In PyTorch, we use tensors to encode the inputs and outputs of model, as well as the model’s parameters. Tensors are similar to NumPy’s arrays, expect that tensors can run on GPU or other hardware.\nPyTorch Tensor\nIntroduction to PyTorch Tensors"
  },
  {
    "objectID": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#what-are-tensors",
    "href": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#what-are-tensors",
    "title": "pytorch tensor cheatsheet",
    "section": "",
    "text": "Tensors are a specialized data structure that are very similar to arrays and matrices. In PyTorch, we use tensors to encode the inputs and outputs of model, as well as the model’s parameters. Tensors are similar to NumPy’s arrays, expect that tensors can run on GPU or other hardware.\nPyTorch Tensor\nIntroduction to PyTorch Tensors"
  },
  {
    "objectID": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#import-torch",
    "href": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#import-torch",
    "title": "pytorch tensor cheatsheet",
    "section": "Import torch",
    "text": "Import torch\n\nimport torch"
  },
  {
    "objectID": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#creating-tensors",
    "href": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#creating-tensors",
    "title": "pytorch tensor cheatsheet",
    "section": "Creating Tensors",
    "text": "Creating Tensors\nWays to create a tensor.\n\nFactory Method\nCreating an empty tensor. torch.empty()\n\n# creating a tensor with 2-dimensions, 3 rows and 4 columns.\nx = torch.empty(3,4)\n# by default tenors are 32-bit gloating point numbers.\n# torch.empty() allocates memory for the tensor but does not initialize it with any values\nprint(x)\n\ntensor([[1.5766e-19, 1.0256e-08, 2.5783e-09, 3.0441e+12],\n        [4.3353e-08, 1.7188e-04, 6.7510e-07, 1.2611e+16],\n        [2.1707e-18, 7.0952e+22, 1.7748e+28, 1.8176e+31]])\n\n\nCreating a tensor full of zeros. torch.zeros()\n\n# creating a tensor with 2-dimensions, 2 rows and 3 columns.\nx = torch.zeros(2,3)\nprint(x)\n\ntensor([[0., 0., 0.],\n        [0., 0., 0.]])\n\n\nCreating a tensor full of ones. torch.ones()\n\n# creating a tensor with 2-dimensions, 3 rows and 1 column.\nx = torch.ones(3,1)\nprint(x)\n\ntensor([[1.],\n        [1.],\n        [1.]])\n\n\nCreating a tenor full of random values. torch.rand()\n\ntorch.manual_seed(187)\n# creating a tensor with 2-dimension, 2 rows and 3 columns.\nrandom = torch.rand(2,3)\nprint(random)\n\ntensor([[0.5305, 0.9925, 0.7754],\n        [0.9989, 0.3047, 0.9887]])\n\n\n\n\nCreating a tensor with specific data directly\ntorch.tensor() is the way to create a tenors if you have a Python tuple or list. Is creates a copy of the data as tensor.\n\nx = torch.tensor(([1,2,3],[4,5,6]))\nprint(x.shape)\nprint(x)\n\ntorch.Size([2, 3])\ntensor([[1, 2, 3],\n        [4, 5, 6]])\n\n\n\n\nRandom tensor and seeding\ntorch.manual_seed() sets the random seed to fixes the random outputs.\ntorch.rand() creates a random tensor.\n\ntorch.manual_seed(187)\nrandom = torch.rand(5,5)\nprint(random)\n\ntensor([[0.5305, 0.9925, 0.7754, 0.9989, 0.3047],\n        [0.9887, 0.3299, 0.2694, 0.5281, 0.8815],\n        [0.5275, 0.7802, 0.9964, 0.1060, 0.5047],\n        [0.6960, 0.1014, 0.8651, 0.9504, 0.7015],\n        [0.2917, 0.7787, 0.3808, 0.2624, 0.6519]])\n\n\n\n\nCreating tensor with the shape like\nCreating a tensor having the same number dimensions and the same number of cells in each dimension. - torch.empty_like() - torch.zeros_like() - torch.ones_like() - torch.rand_like()\n\nx = torch.empty(2,2,3)\nprint(x)\n\nzeros_like_x = torch.zeros_like(x)\nprint(zeros_like_x)\n\ntensor([[[0.0000e+00, 6.8664e-44, 2.7002e-06],\n         [2.6965e+23, 3.3429e+21, 1.0489e-08]],\n\n        [[1.6505e-07, 1.7664e-04, 4.1532e-08],\n         [5.3928e-05, 1.6597e-07, 5.3130e-08]]])\ntensor([[[0., 0., 0.],\n         [0., 0., 0.]],\n\n        [[0., 0., 0.],\n         [0., 0., 0.]]])\n\n\n\n\nTerminology about tensors and thier number of dimensions\n\n0-dimensional tensor is called a scalar\n1-dimensional tensor is called a vector\n2-dimensional tensor is called a matrix\n3-dimensional or more tensor is called a tensor\n\n\nd0 = torch.ones(1)\nprint('scalar (0-dim)')\nprint(d0)\nprint('\\n')\n\nd1 = torch.ones(1,4)\nprint('vector 1-dim')\nprint(d1)\nprint('\\n')\n\n\nd2 = torch.ones(3,3)\nprint('matrix 2-dim')\nprint(d2)\nprint('\\n')\n\nd3 = torch.ones(4,4,4)\nprint('tensor 3-dim or more')\nprint(d3)\n\nscalar (0-dim)\ntensor([1.])\n\n\nvector 1-dim\ntensor([[1., 1., 1., 1.]])\n\n\nmatrix 2-dim\ntensor([[1., 1., 1.],\n        [1., 1., 1.],\n        [1., 1., 1.]])\n\n\ntensor 3-dim or more\ntensor([[[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]]])\n\n\n.shape property gives list of the extant of each dimension\n\nx = torch.zeros(2,1)\nx.shape\n\ntorch.Size([2, 1])\n\n\n\n\nTensor data types\nOne way to set the data type of a tensor is with an optional argument at creation.\nYou can see the specified dtype by printing the tensor.\n\na = torch.ones((2,3), dtype=torch.int16)\nprint(a)\n\ntensor([[1, 1, 1],\n        [1, 1, 1]], dtype=torch.int16)\n\n\nAnother way to set the datatype is with the .to() method. It converts a float64 and creates a int32 tensor.\n\na = torch.ones((2,3), dtype=torch.float64)\nprint(a)\n\nb = a.to(torch.int32)\nprint(b)\n\ntensor([[1., 1., 1.],\n        [1., 1., 1.]], dtype=torch.float64)\ntensor([[1, 1, 1],\n        [1, 1, 1]], dtype=torch.int32)\n\n\nPyTorch datatypes:\n\ntorch.bool\ntorch.int8\ntorch.uint8\ntorch.int16\ntorch.int32\ntorch.int64\ntorch.half\ntorch.float\ntorch.double\ntorch.bfloat"
  },
  {
    "objectID": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#math-logic",
    "href": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#math-logic",
    "title": "pytorch tensor cheatsheet",
    "section": "Math & Logic",
    "text": "Math & Logic\nBasic arithmetic with tensors.\n\ntwos = torch.ones(2,2) * 2\nprint(twos)\n\ntensor([[2., 2.],\n        [2., 2.]])\n\n\nArithmetic operations between tensors and scalars, such as addition, subtraction, multiplication, division, and exponentiation are distributed over every element of the tensor.\nOperation between tow tensors also behave intuitively:\n\nones = torch.ones(2,2)\nprint(ones + twos)\n\ntensor([[3., 3.],\n        [3., 3.]])\n\n\nTensors of dissimilar shape will throw a run-time error when calculated via binary operation.\n\n# The following throws a run-time error. This is intentional.\na = torch.rand(2,3)\nb = torch.rand(3,4)\n\nprint(a * b)\n\nRuntimeError: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 1\n\n\nMore math-operations:\nMore Pytorch Math-Operations"
  },
  {
    "objectID": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#tensor-broadcasting",
    "href": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#tensor-broadcasting",
    "title": "pytorch tensor cheatsheet",
    "section": "Tensor Broadcasting",
    "text": "Tensor Broadcasting\nThe exception to the same-shape rule is tensor broadcasting.\n\nrand = torch.rand(2,4)\ndoubled = rand * (torch.ones(1,4)*2)\n\nprint(rand)\nprint(doubled)\n\ntensor([[0.6098, 0.3175, 0.3386, 0.4934],\n        [0.9187, 0.8510, 0.7339, 0.3254]])\ntensor([[1.2195, 0.6349, 0.6772, 0.9867],\n        [1.8375, 1.7020, 1.4677, 0.6508]])\n\n\nHow is it we get to multiply a 2x4 tensor by a 1x4 tensor?\nBroadcasting is a way to perform an operation between tensors that have similarities in their shapes. In the example above, the one-row, four-column tensor is multiplied by both rows of the two-row, four-column tensor.\nbroadcasting examples:\n\n\n\nPytorch Broadcasting\n\n\nThis is an important operation in Deep Learning. The common example is multiplying a tensor of learning weights by a batch of input tensors, applying the operation to each instance in the batch separately, and returning a tensor of identical shape - just like (2,4) * (1,4) example above returned a tensor of shape (2,4).\nThe rules of broadcasting are:\n\nEach tensor must have at least one dimension - no empty tensors.\nComparing the dimension sizes of the two tensors, going form last to first:\n\nEach dimension must be equal of\nOne of the dimension must be of size 1, or\nDimension does not exist in one of the tensors\n\n\nTensors of identical shape, of course are trivially “broadcastable”, as you saw earlier.\nHere are some examples of situation that honor the above rules and allow broadcasting:\n\na = torch.ones(4,3,2)\nprint(a)\n\ntensor([[[1., 1.],\n         [1., 1.],\n         [1., 1.]],\n\n        [[1., 1.],\n         [1., 1.],\n         [1., 1.]],\n\n        [[1., 1.],\n         [1., 1.],\n         [1., 1.]],\n\n        [[1., 1.],\n         [1., 1.],\n         [1., 1.]]])\n\n\n\nb = a * torch.rand(3,2) # 3rd & 2nd dims identical to a, dim 1 absent\nprint(b)\n\ntensor([[[0.6381, 0.9161],\n         [0.5682, 0.7014],\n         [0.7000, 0.8772]],\n\n        [[0.6381, 0.9161],\n         [0.5682, 0.7014],\n         [0.7000, 0.8772]],\n\n        [[0.6381, 0.9161],\n         [0.5682, 0.7014],\n         [0.7000, 0.8772]],\n\n        [[0.6381, 0.9161],\n         [0.5682, 0.7014],\n         [0.7000, 0.8772]]])\n\n\n\nd = a * torch.rand(1,2) # 3rd dim identical to a, 2nd dim = 1\nprint(d)\n\ntensor([[[0.6071, 0.9969],\n         [0.6071, 0.9969],\n         [0.6071, 0.9969]],\n\n        [[0.6071, 0.9969],\n         [0.6071, 0.9969],\n         [0.6071, 0.9969]],\n\n        [[0.6071, 0.9969],\n         [0.6071, 0.9969],\n         [0.6071, 0.9969]],\n\n        [[0.6071, 0.9969],\n         [0.6071, 0.9969],\n         [0.6071, 0.9969]]])\n\n\n\na = torch.ones(     4,  3,  2)\n\nb = a * torch.rand(     4,  3)  # dimension must match last-to-first\n\nc = a * torch.rand(     2,  3)  # both 3rd & 2nd dims different\n\nd = a * torch.rand(0,)          # cant broadcast with an empty tensor\n\nRuntimeError: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 2\n\n\n\nAltering Tensors in Place\nMost binary operations on tensors will return a third, new tensor. When we say c = a * b (where a and b are tensors), the new tensor c will occupy a region of memory distinct from the other tensors.\nThere are times, though, that you may whish to alter a tensor in place - for example. if you’re doing an element-wise computation where you can discard intermediate value. For this, most of the math function have a version with an underscore(_) that will alter a tensor in place.\n\na = torch.tensor([0, math.pi / 4, math.pi / 2, 3 * math.pi / 4])\nprint('a:')\nprint(a)\nprint(torch.sin(a))     # this operation creates a new tensor in memory\nprint(a)                # a has not changed\n\nb = torch.tensor([0, math.pi / 4, math.pi / 2, 3 * math.pi / 4])\nprint('\\nb:')\nprint(b)\nprint(torch.sin_(b))    # note the underscore\nprint(b)                # b has changed\n\na:\ntensor([0.0000, 0.7854, 1.5708, 2.3562])\ntensor([0.0000, 0.7071, 1.0000, 0.7071])\ntensor([0.0000, 0.7854, 1.5708, 2.3562])\n\nb:\ntensor([0.0000, 0.7854, 1.5708, 2.3562])\ntensor([0.0000, 0.7071, 1.0000, 0.7071])\ntensor([0.0000, 0.7071, 1.0000, 0.7071])\n\n\nFor arithmetic operations, here are function that behave similar:\n\na = torch.ones(2,2)\nb = torch.rand(2,2)\n\nprint('Before: ')\nprint(a)\nprint(b)\nprint('\\nAfter adding:')\nprint(a.add_(b))\nprint(a)\nprint(b)\nprint('\\nAfter multiplying')\nprint(b.mul_(b))\nprint(b)\n\nBefore: \ntensor([[1., 1.],\n        [1., 1.]])\ntensor([[0.4583, 0.6130],\n        [0.6209, 0.9512]])\n\nAfter adding:\ntensor([[1.4583, 1.6130],\n        [1.6209, 1.9512]])\ntensor([[1.4583, 1.6130],\n        [1.6209, 1.9512]])\ntensor([[0.4583, 0.6130],\n        [0.6209, 0.9512]])\n\nAfter multiplying\ntensor([[0.2100, 0.3757],\n        [0.3856, 0.9048]])\ntensor([[0.2100, 0.3757],\n        [0.3856, 0.9048]])\n\n\nNote that these in-place arithmetic functions are methods an the torch.Tensor object, not attached to the torch module like many other functions (e.g. torch.sin()). As you can see from a.add_(b), the calling tensor is the one that gets changed in place."
  },
  {
    "objectID": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#copying-tensors",
    "href": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#copying-tensors",
    "title": "pytorch tensor cheatsheet",
    "section": "Copying Tensors",
    "text": "Copying Tensors\nAs with any object in Python, assigning a tensor to a variable makes the variable a label of the tensor, and does not copy it. For example.\n\na = torch.ones(2,2)\nb = a\n\na[0][1] = 561   # we change a ...\nprint(b)        # and b is also altered\n\ntensor([[  1., 561.],\n        [  1.,   1.]])\n\n\nBut what is if you want a separated copy of the data to work on? The clone() method is there for you:\n\na = torch.ones(2,2)\nb = a.clone()\n\nassert b is not a       # differen objects in  memory ...\nprint(torch.eq(a,b))    # ... but still with the same contents\n\na[0][1] = 561\nprint(b)\n\ntensor([[True, True],\n        [True, True]])\ntensor([[1., 1.],\n        [1., 1.]])\n\n\nThere is an important thing to be aware of when using clone(). If your source tensor has autograd enabled then so will the clone. This will be covered more deeply in the video on autograd, but if you want the light version of the details, continue on."
  },
  {
    "objectID": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#moving-to-gpu",
    "href": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#moving-to-gpu",
    "title": "pytorch tensor cheatsheet",
    "section": "Moving to GPU",
    "text": "Moving to GPU\nTo check whether a GPU is available we can use torch.cuda.is_available()\n\nif torch.cuda.is_available():\n    print('We have GPU!')\nelse:\n    print('Sorry, CPU only')\n\nWe have GPU!\n\n\nBy default new tensors are created on the CPU. You have to specify an optional device argument to use the tensor on a GPU.\nAs an coding practice, specifying our devices everywhere with string constants is pretty fragile. You can create a device handle to pass it to you tensors.\n\nif torch.cuda.is_available():\n    my_device = torch.device('cuda')\nelse:\n    my_device = torch.device('cpu')\n\nprint('Device: {}'.format(my_device))\n\nx = torch.rand(2,2, device=my_device)\nprint(x)\n\nDevice: cuda\ntensor([[0.2694, 0.5133],\n        [0.4625, 0.0572]], device='cuda:0')\n\n\nWith .to() you can move a tensor from CPU to a GPU or vise versa.\n\ny = torch.rand(2,2)\ny = y.to(my_device)\n\nTensors must be on the same device.\n\nx = torch.rand(2,2, device='cpu')\ny = torch.rand(2,2, device='cuda')\n\nz = x + y # exception will be thrown\n\nRuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!"
  },
  {
    "objectID": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#manipulating-tensor-shapes",
    "href": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#manipulating-tensor-shapes",
    "title": "pytorch tensor cheatsheet",
    "section": "Manipulating Tensor Shapes",
    "text": "Manipulating Tensor Shapes\n\nChanging Shape by Squwwzing And Unsqueezing\nunsqueeze() method adds a dimension of extent 1. unsqueesze(1) adds it as a new zeroth dimension.\n\na = torch.rand(2,266,266)\nb = a.unsqueeze(0)\nprint(a.shape)\nprint(b.shape)\n\ntorch.Size([2, 266, 266])\ntorch.Size([1, 2, 266, 266])\n\n\nWhen we squeeze() a tensor, the dimensions of size 1 are removed. The elements of the original tensor are arranged with the remaining dimensions. For example, if the input tensor is of shape: (m×1×n×1) then the output tensor after squeeze will be of shape: (m×n).\n\na = torch.rand(2,2)\nprint(a)\nprint(a.shape)\n\nb = a.squeeze()\nprint(b)\nprint(b.shape)\n\nc = torch.rand(1,20)\nprint(c)\nprint(c.shape)\n\nd = c.squeeze()\nprint(d)\nprint(d.shape)\n\ntensor([[0.5690, 0.0415],\n        [0.1794, 0.7428]])\ntorch.Size([2, 2])\ntensor([[0.5690, 0.0415],\n        [0.1794, 0.7428]])\ntorch.Size([2, 2])\ntensor([[0.1640, 0.1609, 0.6381, 0.9161, 0.5682, 0.7014, 0.7000, 0.8772, 0.6071,\n         0.9969, 0.1627, 0.6761, 0.0416, 0.7503, 0.2614, 0.9380, 0.2171, 0.8036,\n         0.7253, 0.2340]])\ntorch.Size([1, 20])\ntensor([0.1640, 0.1609, 0.6381, 0.9161, 0.5682, 0.7014, 0.7000, 0.8772, 0.6071,\n        0.9969, 0.1627, 0.6761, 0.0416, 0.7503, 0.2614, 0.9380, 0.2171, 0.8036,\n        0.7253, 0.2340])\ntorch.Size([20])\n\n\n\n\nReshaping a Tensor without changing the rank\nChanging a tensor without changing the rank.\n\nt = torch.tensor([\n    [1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3]\n], dtype=torch.float32)\nprint(t)\n\nd = t.reshape([1,12])\nprint(d)\n\nd = t.reshape([2,6])\nprint(d)\n\ntensor([[1., 1., 1., 1.],\n        [2., 2., 2., 2.],\n        [3., 3., 3., 3.]])\ntensor([[1., 1., 1., 1., 2., 2., 2., 2., 3., 3., 3., 3.]])\ntensor([[1., 1., 1., 1., 2., 2.],\n        [2., 2., 3., 3., 3., 3.]])\n\n\nUsing reshape() we can specify the row x column shape that we are seeking. All of the shapes have to account for the number of elements in the tensor.\n\n\nFlatten a Tensor\nA flatten operation on a tensor reshapes the tensor to have a shape that is equal to the number of elements contained in the tensor. This is the same thing as a 1d-array of elements.\n\nt = torch.tensor([\n    [1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3]\n], dtype=torch.float32)\nprint(t.shape)\n\nd = t.flatten()\nprint(d)\nprint(d.shape)\n\ntorch.Size([3, 4])\ntensor([1., 1., 1., 1., 2., 2., 2., 2., 3., 3., 3., 3.])\ntorch.Size([12])"
  },
  {
    "objectID": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#pytorch-numpy-bridge",
    "href": "notes/2023-09-09_pytorch_tensors/pytorch_tensor_note.html#pytorch-numpy-bridge",
    "title": "pytorch tensor cheatsheet",
    "section": "Pytorch-Numpy Bridge",
    "text": "Pytorch-Numpy Bridge\n\nimport numpy as np\n\nnumpy_array = np.ones((2,3))\nprint(numpy_array)\n\npytorch_tensor = torch.from_numpy(numpy_array)\nprint(pytorch_tensor)\n\n[[1. 1. 1.]\n [1. 1. 1.]]\ntensor([[1., 1., 1.],\n        [1., 1., 1.]], dtype=torch.float64)\n\n\nPyTorch creates a tensor of the same shape and containing the same data as the NumPy array, going so far as to keep NumPys default 64bit float data type. The conversion can also go the other way:\n\npytorch_rand = torch.rand(2,3)\nprint(pytorch_rand)\n\nnumpy_rand = pytorch_rand.numpy()\nprint(numpy_rand)\n\ntensor([[0.1050, 0.5877, 0.4583],\n        [0.6130, 0.6209, 0.9512]])\n[[0.10500968 0.5877479  0.4582944 ]\n [0.61297506 0.62093675 0.9512319 ]]\n\n\nIt is important to know that these converted objects are using the same underlying memory as thier source objects, meaning that changes to one are reflected in the other:\n\nnumpy_array[1,1] = 23\nprint(pytorch_tensor)\n\ntensor([[ 1.,  1.,  1.],\n        [ 1., 23.,  1.]], dtype=torch.float64)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "janf",
    "section": "",
    "text": "I’m janf from west austria 🇦🇹️. I like to learn and create new things. Here i take notes about these processes or outcomes ✌️\nEmail me at mail[at]janf.cc if you like!\nmore coming soon…"
  },
  {
    "objectID": "about.html#hey",
    "href": "about.html#hey",
    "title": "janf",
    "section": "",
    "text": "I’m janf from west austria 🇦🇹️. I like to learn and create new things. Here i take notes about these processes or outcomes ✌️\nEmail me at mail[at]janf.cc if you like!\nmore coming soon…"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\ndata ethics\n\n\n\n\n\nfastai book chapter 3\n\n\n\n\n\n2023-09-24\n\n\n8 min\n\n\n\n\n\n\n\n\n\n\n\n\nfrom model to production\n\n\n\n\n\nfastai book chapter 2\n\n\n\n\n\n2023-08-18\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\nyour deep learning journey\n\n\n\n\n\nfastai book chapter 1\n\n\n\n\n\n2023-08-14\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\nhello world\n\n\n\n\n\nThe first post on this blog\n\n\n\n\n\n2023-06-30\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-08-18_from_model_to_production/subsite/from_model_to_production_questions.html",
    "href": "posts/2023-08-18_from_model_to_production/subsite/from_model_to_production_questions.html",
    "title": "Questions - Chapter 2",
    "section": "",
    "text": "Back to blog post\n\n\n\nfastai book chapter 2\n\n\n\n\n\n\n\n\nLinks\n\n\n\n\nSource: Fastbook Chapter 2 questionnaire solutions (wiki)\n\n\n\n Where do text models currently have major deficiency? \nCurrently deep learning is not good at generating correct responses! We don’t have a reliable way to, for instance, combine a knowledge base of medical information with a deep learning model for generating medically correct natural language responses. This can be very dangerous, as the layman may not be able to evaluate the factual accuracy of the generated text.\n What are possible negative societal implications of text generation models? \nA negative societal concern is that context-appropriate, highly compelling responses on social media could be used at massive scale, to spread disinformation, create unrest and encourage conflict.\nModels reinforce bias (like gender bias, racial bias) in training data and create a vicious cycle of biased outputs.\n In situations where a model might make mistakes, and those mistakes could be harmful, what is a good alternative to automating a process? \nOne alternative is to use an entirely manual process, with your deep learning model approach running in parallel but not being used directly to drive any actions. The humans involved in the manual process should look at the deep learning output and check whether they make sense.\n What kind of tabular data is deep learning particularly good at? \nIt great for analyzing time series and tabular data. Deep learning is also great at increasing columns containing neutral language and high categorical columns.\n What’s a key downside of directly using a deep learning model for recommendation systems? \nAlmost all machine learning approaches have the downside that they tell you only which product a particular user might like, rather than what recommendations would be helpful for a user. For example, if a user is familiar with other books from the same author, it isn’t helpful to recommend those products even though the user bought the author’s book. Or, recommending products a user may have already purchased.\n What are the steps of the Drivetrain Approach? \n\nDefine an objective\nUnderstand the levers: what inputs can you control?\nWhat data can you collect?\nmodel the levers in order to understand how they affect the objective.\n\nThe basic idea is to start with considering your objective, than think about what actions you can tak to meet that objective, then think about what actions you can take to meet that objective and what data you have (or can acquire) than can help, and then build a model that you can use to determine tha best actions to take to get the best results in terms of your objective.\n Create an image recognition model using data you curate, and deploy, it on the web. \nTodo. Watch Lesson 2 for help.\n What is Dataloaders? \n\nA DataLoader doesn’t care about preparing data, it expects the data ready to go and only cares about how to load the data (e.g. whether in parallel or in a single process) as well as feeding the data to the model in batches (i.e. batch size)\nA DataLoaders is a thin wrapper for more than one DataLoader\n\n What four things do we need to tell fastai to create DataLoaders? \n\nwhat kinds of data we working with\nhow to get the list of items\nhow to label these items\nhow to create the validation set\n\n What does the splitter parameter to DataBlock do? \nThe splitter parameter provides argument to tell fastai DataBlock to splits the data in a training and validation data set. For example create a 80% training und 20% validation random split of the data you could use splitter=RandomSplitter(valid_pct=0.2, seed = 42). With the random seed 42 we fix the randomness to get the same result for every run.\n How do we ensure a random split always gives the same validation set? \nComputer normally don’t generate truly random outputs they use a pseudo-random-generator which takes a random seed as an input. With random seed input we will get the same result for every run. Using a random seed, we can generate a random split that gives the same training and validation set.\n What letters are often used to signify the independent and dependent variables? \n\nx is independent\n\nAn independent variable is the variable you manipulate or vary in an experimental study to explore its effects. It’s called “independent” because it’s not influenced by any other variables in the study\n\ny is dependent\n\nA dependent variable is the variable that changes as a result of the independent variable manipulation. It’s the outcome you’re interested in measuring, and it “depends” on your independent variable.\n\n\n What the difference between crop, pad, and squish Resize() approaches? When might you choose one over the other? \nThe default of the fastai resize function is crop.\n\nCrop (Zuschneiden) –&gt; Fits the images to fit a square of the size requested, using the full width or height. This can result in losing some important details. For example lossing some key features that are cut out of the image.\nPad (Auffuellen) –&gt; Pad adds black pixels to reach the requested size. If we pad an image we have a lot of empty space, which is wasted computation for our model, and lowers the effective resolution of the images.\nSquish (Stauchen) –&gt; Squish stretches or squishes the image to the requested size. This can cause the image to take an unnatural form, leading to a model that learns that things look different.\n\nThe right resize function depends on the underlying images. If the features of the images are all over the place in the image crop can cut out important features. This can result in loss in information and squishing of padding may be more useful.\nAnother better method could be RandomResizedCrop, in which we crop a randomly selected region of the image. So every epoch, the model will see a different part of the image and will learn accordingly.\n What is data augmentation? Why is it needed? \nData augmentation refers to creating random variations of our input data, such that they appear different but do not change the meaning of the data. Examples of common data augmentation techniques for images are rotation, flipping, perspective warping, brightness changes, and contrast changes. Data augmentation is useful for the model to better understand the basic concept of what an object is and how the objects of interest are represented in images. Therefore, data augmentation allows machine learning models to generalize better. This is especially important when it can be slow and expensive to label data.\n Provide an example of where the bear classification model might work poorly in production, due to structural or style differences in the training data. \n\nThere is no bear in the image and the model has output option for not_a_bear.\nNighttime images are passed into the model.\nThe images vary in resolution. Low-resolution image.\nThe bear is really far or near the camera.\nThe model is very biased towards one type of features (eg. color.)\n\n What is the difference between item_tfms and batch_tfms? \n\nitem_tfms are transformations applied to a single data sample x on the CPU. Resize() is a common transform because the mini-batch of input images to a cnn must have the same dimensions. Assuming the images are RGB with 3 channels, then Resize() as item_tfms will make sure the images have the same with and height.\nbatch_tfms are applied to batched data samples (aka individual samples that have been collated into a mini-batch) on the GPU. They are faster and more efficient than item_tfms. A good example of these are the ones provided by aug_transform(). Inside are several batch-level augmentation that help many models.\n\n What is a confusion matrix? \nIn the field of machine learning and specifically the problem of statistical classification, a confusion matrix, also known as error matrix, is specific table layout that allows visualization of the performance of an algorithm, typically a supervised learning one; in unsupervised learning it is usually called a matching matrix.\nEach row of the matrix represents the instances in an actual class while each column represents the instances in a predicted class, of vise versa. The name stems from the fact that it makes it easy to see whether the system is confusing two classes.\n What does export save do? \nA model consists of two parts. The architecture and the trained parameters, the best way is to save both of these. In fastai you use the export method. This method even saves the definition of how to create your DataLoaders. This is important because otherwise you would have to redefine how to transform your data in order to use your model in production.\n What is it called when we use a model for getting predictions, instead of training? \nWhen we use a model for getting predictions, instead of training, we call it inference.\n What are IPyhton widgets? \nIPython widgets are GUI components that bring together Javascript und Python functionality in a web browser and can be created and used within a Jupyter notebook. One example of these interactive GUI components would be an upload button which can be created with the Python function widgets.FileUpload().\n When might you want to use CPU for deployment? When might GPU be better? \nGPUs are best for doing identical work in parallel. If you will analyzing single pieces of data at time (like a single image or single sentence), then CPUs may be more effective instead, especially with more market competition for CPU servers versus GPU servers. GPUs could be used if you collect user responses into a batch at a time, and perform inference on the batch. This my require the user to wait for model predictions. Additionally, there are many other complexities when it comes to GPU inference, like memory management and queuing of the batches.\n What are the downsides of deploying your app to a server, instead of to a client (or edge) device such as a phone or PC? \nOne downside for using a server over a client that you will require a network connection and there will be some latency each time the model is called. Another negative point can be that some users may be concerned uploading sensitive data to your remote server. Managing the complexity and scaling the server can create additional overhead too, whereas if your model runs on the edge devices, each user is\n What are 3 examples of problems that could occur when rolling out a bear warning system in practice? \nThe model we trained will likely perform poorly when:\n\nHandling night-time images\nDealing with low-resolution images (ex: some smartphone images)\nThe model returns prediction too slowly to be useful\n\n What is “out of domain data”? \nOut of domain data is data that is significantly different in structure or style th those used to train the model. For instance, if there were no black-and-white images in the training data, the model may do poorly on black-and-white images.\n What is “domain shift”? \nThis is when the type of data changes gradually over time. For example, an insurance company is using a deep learning model as part of their pricing algorithm, but over time their customers will be different, with the original training data not being representative of current data, and the deep learning model being applied on effectively out-of-domain data.\n What are the 3 steps in the deployment process? \n\nManual process\n\nRun model in parallel\nHuman check all predictions\n\nLimited scope deployment\n\nCareful human supervision\nTime or geography limited\n\nGradual expansion\n\nGood reporting systems needed\nConsider what could go wrong"
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html",
    "title": "your deep learning journey",
    "section": "",
    "text": "fastai book chapter 1 - janf - 2023"
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#what-is-machine-learning",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#what-is-machine-learning",
    "title": "your deep learning journey",
    "section": "What is machine learning",
    "text": "What is machine learning\nThe idea is instead of telling the computer the exact steps required to solve a problem, show it examples of the problem to solve, and let it figure out how to solve it itself.\n\n\n\ntraining a machine learning model - fastai - 2023\n\n\n\nweight assignment\nautomatic means of testing the effectiveness\ncurrent weight assignment in terms of actual performance\nmechanism for altering the weight assignment so as to maximize the performance"
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#what-is-deep-learning",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#what-is-deep-learning",
    "title": "your deep learning journey",
    "section": "What is deep learning",
    "text": "What is deep learning\nDeep learning is specialty within machine learning that uses neural networks with multiple layers."
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#why-are-neural-network-great-for-machine-deep-learning",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#why-are-neural-network-great-for-machine-deep-learning",
    "title": "your deep learning journey",
    "section": "Why are neural network great for machine / deep learning",
    "text": "Why are neural network great for machine / deep learning\n\nIf you regard a neural network as a mathematical function, it turns out to be function that ist extremely flexible depending on its weights.\nA mathematical proof called the universal approximation theorem shows that this function can solve any problem to any level of accuracy.\nIn neural network we can use stochastic gradient descent (SGD).\nTo determine the actual performance we can define our models performance as its accuracy at predicting the correct answers."
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#modern-deep-learning-loop-and-jargon",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#modern-deep-learning-loop-and-jargon",
    "title": "your deep learning journey",
    "section": "Modern Deep Learning Loop and Jargon",
    "text": "Modern Deep Learning Loop and Jargon\n\n\n\nmodern deep learning loop - fastai - 2023\n\n\n\nArchitecture The template of the model that we trying to fit, the actual mathematical function that we’re passing the input data and parameters to.\nModel The combination of the architecture with a particular set of parameters.\nLabel The data that we trying to predict.\nParameters The values in the model that change what task it can do and that are updated through model training\nPredictions The results of the model are called predictions. The predictions are calculated from the independent variable, which is the data not including the labels.\nLoss Loss ist the measurement of the performance. The loss depends not only on the predictions, but also on the correct labels.\nFit / Train Update the parameters of the model such that the predictions of the model using the input data match the target labels.\nEpoch One complete pass through the input data (training set)"
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#limitations-inherent-to-machine-learning",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#limitations-inherent-to-machine-learning",
    "title": "your deep learning journey",
    "section": "Limitations Inherent to Machine Learning",
    "text": "Limitations Inherent to Machine Learning\n\nA model cannot be created without data.\nA model can learn to operate on only the patterns seen in the input data used to train it.\nThis learning approach creates only predictions, not recommended actions.\nIt’s not enough to just have examples of input data, we need labels for that data too."
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#classification-and-regression",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#classification-and-regression",
    "title": "your deep learning journey",
    "section": "Classification and Regression",
    "text": "Classification and Regression\n\nClassification A classification model is one that attempts to predict a class, or category. That is, it’s predicting from a number of discrete possibilities.\nRegression A regression model is one that attempts to predict one or more numeric quantities, such as a temperature or a location."
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#what-is-overfitting",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#what-is-overfitting",
    "title": "your deep learning journey",
    "section": "What is Overfitting",
    "text": "What is Overfitting\nOverfitting is the single most important and challenging issue when training for all machine learning. Training a model in such a way that it remembers specific features of the input data, rather than generalizing well to data not seen during training."
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#training-set-validation-sets-and-test-sets",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#training-set-validation-sets-and-test-sets",
    "title": "your deep learning journey",
    "section": "Training Set, Validation Sets and Test Sets",
    "text": "Training Set, Validation Sets and Test Sets\n\nTraining set The data used for fitting the model, does not include any data from the validation set. (If there is enough data 80% is used for training)\nValidation set A set of data held out from training, used only for measuring how good the model is. (If there is enough data 20% is used for validation)\nTest set As we hold the validation data back from the training process, we can hold back a test set data even from ourselves. It cannot be used to improve the model, it can only be used to evaluate the model at the very end. (Take out some data for testing and split the rest to 80% for training and 20% for validation)\n\n\n\n\n\n\n\nNote\n\n\n\nFor decision makers it is important to unsure to rally understand what a test and validation set is. For example you should never give out all the data to an external vender. Always hold some test data (test set) for your own validation of the final model."
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#what-is-a-cnn-convolutional-neural-network",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#what-is-a-cnn-convolutional-neural-network",
    "title": "your deep learning journey",
    "section": "What is a CNN (Convolutional neural network)",
    "text": "What is a CNN (Convolutional neural network)\nConvolutional neural network, a type of neural network that works particularly well for computer vision tasks."
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#pertrained-model-and-fine-tuning",
    "href": "posts/2023-08-14_your_deep_learning_journey/your_deep_learning_journey_post.html#pertrained-model-and-fine-tuning",
    "title": "your deep learning journey",
    "section": "Pertrained model and Fine-tuning",
    "text": "Pertrained model and Fine-tuning\nPretrained model A pretrained model has weights already been trained on some other dataset. You should nearly always use a pretrained model, because it means the your model, before you’ve even shown it any of your data, is already very capable. For instance. parts of pretrained models will handle edge, gradient, and color detection. which are needed for many tasks.\nTransfer learning Using a pretrained model for a task different to what it was originally trained for.\nFine-tuning A transfer learning technique where the parameters of a pretrained model are updated by training for additional epochs using a different task that used for pretraining.\n\n\n\n\n\n\nNote\n\n\n\nUsing a pretrained model is the most important method we have to allow us to train more accurate models, more quickly, with less data, and less time and money."
  },
  {
    "objectID": "posts/2023-09-24_data_ethics/subsite/data_ethics_questions.html",
    "href": "posts/2023-09-24_data_ethics/subsite/data_ethics_questions.html",
    "title": "Questions - Chapter 3",
    "section": "",
    "text": "Back to blog post\n\n\n\nfastai book chapter 3\n\n\n\n\n\n\n\n\nLinks\n\n\n\n\nSource: Fastbook Chapter 3 questionnaire solutions (wiki)\n\n\n\n Does ethics provide a list of “right answers”? \nThere is no list of do’s and dont’s. Ethics is complicated, and context-dependent. It involves the perspectives of many stakeholders. Ethics is a muscle that you have to develop and practice.\n How can working with people of different background help when considering ethical questions? \nWhen everybody on a team has similar backgrounds, they are likely to have similar blind spots around ethical risks. Diversity can lad to problems being identified earlier, and a wider range of solutions being considers.\n What was the role of IBM Nazi Germany? Why did the company participate as they did? Why did the workers participate? \nIBM supplied the Nazis with data tabulation products necessary to track the extermination of Jews and other groups on a massive scale. This was driven from the top of the company, with marketing to Hitler and his leadership team. Company President Thomas Watson personally approved the 1939 release of special IBM alphabetizing machines to help organize the deportation of Polish Jews. Hitler awarded Watson a special “Service to the Reich” medal in 1937.\nBut it also happened throughout the organization. IBM and its subsidiaries provided regular training and maintenance on-site at the concentration camps: printing off cards, configuring machines, and repairing them as they broke frequently. IBM set up categorizations on their punch card system for the way that each person was killed, which group they were assigned to, and the logistical information necessary to track them through the vast Holocaust system. IBM’s code for Jews in the concentration camps was 8, where around 6,000,000 were killed. Its code for Romanis was 12 (they were labeled by the Nazis as “asocials”, with over 300,000 killed in the Zigeunerlager , or “Gypsy camp”). General executions were coded as 4, death in the gas chambers as 6.\nThe marketers were just doing what they could to meet their business development goals. Edwin Black, author of “IBM and the Holocaust”, said: “To the blind technocrat, the means were more important than the ends. The destruction of the Jewish people became even less important because the invigorating nature of IBM’s technical achievement was only heightened by the fantastical profits to be made at a time when bread lines stretched across the world.”\n What was the role of the first person jailed in the VW diesel scandal? \nThe first person who was jailed as a result of the Volkswagen scandal, in which the car company was revealed to have cheated on its diesel emissions test, was not the manager who oversaw the project, or an executive at the holm of the company. It was one of the engineers, James Liang, who just did what he was told.\n What was the problem with a database of suspected gang members maintained by California law enforcement officials? \nA database of suspected gang members maintained by california law enforcement officials was found to be full of errors, including 42 babies who had been added to the database when they were less than 1 year old (28 of whom were marked as admitting to being gang members). In this case, there was no process in place for correcting mistakes or removing people once they’d been added.\n Why did Youtube’s recommendation algorithm recommend videos of partially clothed children to pedophiles, even although no employee at Google programmed this feature? \nYouTube recommendation algorithm had begun curating playlists for pedophiles, picking out innocent home videos that happened to contain prepubescent, partially clothed children.\nPart of the problem here is the centrality of metrics in driving a financially important system. When an algorithm has a metric to optimize, it will do everything it can to optimize that number. This tends to lead to all kinds of edge cases, and human interacting with a system will search for, find, and exploit these edge cases and feedback loops for their advantage.\n What are the problems with the centrality of metrics? \nPart of the problem here is the centrality of metrics in driving a financially important system. When an algorithm has a metric to optimize, it will do everything it can to optimize that number. This tends to lead to all kinds of edge cases, and human interacting with a system will search for, find, and exploit these edge cases and feedback loops for their advantage.\n Why did Meetup.com not include gender in its recommendation system for tech meetups? \nA engineer ar Meetup, discussed the example of men expressing more interest than women in tech meetups. Taking gender into account could therefore cause Meetups algorithm to suggest even fewer tech meetups to women.\nThe team at meetup made the ethical decision for their recommendation algorithm to not create such a feedback loop, by explicitly not using gender for that part of their model.\n What are the six types of bias in machine learning, according to Suresh and Guttag? \n\nHistorical bias\n\nHistorical bias comes from the fact that people are biased, processes are biased, and society is biased. It is fundamental, structural issue with the first step of the data generation process and can exist even given perfect sampling and feature selection.\nExample: Any dataset involving humans can have this kind of bias: medical data, sales data, housing data, political data, and so on. Race bias is an example of historical bias.\n\nMeasurement bias\n\nMeasurement bias can occur when our model makes mistakes because we are measuring the wrong thing, or measuring it in the wrong way, or incorporating that measurement into the model inappropriately.\nExample: An example is the stroke prediction model that includes information about if a person went to a doctor in it’s prediction if a patient had as stroke.\n\nAggregation bias\n\nAggregation bias occurs when models do not aggregate data in a way that incorporates all of the appropriate factors, or when a model does not include the necessary interaction terms, nonlinearities, or so forth.\nExample: Is that effectiveness of treatments in medicine of some diseases differs on gender and ethnicity, but where those parameters are not present in the training data as they have been “aggregated away”.\n\nRepresentation bias\n\nWhen the model emphasize some property of the data as it seemingly has the closest correlation with the prediction, even though that might not be the truth.\nExample: An example is the gender property in the occupation prediction model where the model only predicted 11.6% of surgeons to be women whereas the real number was 14.6%.\n\nEvaluation bias\n\nEvaluation bias occurs when the benchmark data used for a particular task does not represent the use population. A model is optimized on its training data, but its quality is often measured on benchmarks. These benchmark encourages the development and deployment of models that perform well only on the subset of the data represented by the benchmark data.\nExample: Images of dark-skinned women comprise only 7.4% and 4.4% of common benchmark datasets Adience and IJB-A, and thus benchmarking on them failed to discover and penalize underperformance on this part of the population.\n\nDeployment bias\n\nDeployment bias arises when there is a mismatch between the problem a model is intended to solve and the way in which it is actually used. This often occurs when a system is built and evaluated as if it were fully autonomous, while in reality, it operates in a complicated sociotechnical system moderated by human decision-makers.\nExample: Algorithmic risk assessment tools in the criminal justice context are models intended to predict a person’s likelihood of committing a future crime. In practice, however, these tools may be used in “off-label” ways, such as to help determine the length of a sentence.\n\n\n Give to examples of historical race bias in the US \nWhen doctors were shown identical files, they were much less likely to recommend cardiac catherization (a helpful procedure) to Black patients.\nAn all-white jury was 16% more likely to convict a Black defendant than a white one, but when a jury had at least one Black member, it convicted both at the same rate.\n Where are most images in ImageNet from? \nThe vast majority ot the images are from the US and other Western countries, leading to models trained on ImageNet performing worse an scenes from other countries and cultures. Research found that such models are worse at identifying household items (such as soap, spices, sofas or beds) from lower-income countries.\n In the paper “Does Machine Learning Automate Moral Hazard and Error” why is sinusitis found to predictive of a stroke? \nSinusitis has nothing to do with having a stroke. This was measurement bias. It occurs when our models make mistakes because we are measuring the wrong thing, or measuring it in the wrong way or incorporating that measurement into the model inappropriately. So in the Review they really measured who had symptoms, went to a doctor, fot the appropriate test, and received a diagnosis of stroke. Having a stroke is not the only thing correlated - it’s also being the kind of person who goes to the doctor and has access to healthcare.\n What is representation bias? \nWhen the model emphasize some property of the data as it seemingly has the closest correlation with the prediction, even though that might not be the truth. An example is the gender property in the occupation prediction model where the model only predicted 11.6% of surgeons to be women whereas the real number was 14.6%.\n How are machines and people different, in terms of their use for making decisions? \n\nMachine decisions are cheaper and more efficient (when they do the right thing).\nHumans use people and algorithms differently when getting advice on decisions.\nAlgorithms are more likely to be implemented with a no-appeals process in place.\nAlgorithms are often used at scale.\n\n Is disinformation the same as “fake news”? \nDisinformation is not necessarily about getting someone to believe something false, but rather often used to sow disharmony and uncertainty, and to get people to give up on seeking the truth. It can often contain some seeds of truth, or half-truths taken out of context.\n Why is disinformation through auto-generated text particularly significant issues? \nDisinformation through autogenerated text is a particularly significant issue, due to the greatly increased capability provided by deep learning.\nIt is easier with machine learning to coordinate campaign of inauthentic behavior. For instance, fraudulent accounts may try to make it seem like many people hold a particular viewpoint.\n What are the five ethical lenses described by the Markkula Center? \nThese five foundational ethical lenses can help identify concrete issues:\n\nThe rights approach\n\nWhich option best respects the rights of all who have a stake?\n\nThe justice approach\n\nWhich option treats people equally or proportionately?\n\nThe utilitarian approach\n\nWhich option will produce the most good and do the least harm?\n\nThe common good approach\n\nWhich option best serves the community as a whole, not just some members?\n\nThe virtue approach\n\nWhich option leads me to act as the sort of person I want to be?\n\n\n Where is policy an appropriate tool for addressing data ethics issues? \nPolicies are an appropriate tool for addressing data ethics issues when is likely that design fixes, self regulation and technical approaches to addressing problems, involving ethical uses of Machine Learning are not working.\nWhile such measures can be useful, they will not be sufficient to address the underlying problems that have led to our current state. For example, as long as it is incredibly profitable to create addictive technology, companies will continue to do so, regardless of whether this has the side effect of promoting conspiracy theories and polluting our information ecosystem. While individual designers may try to tweak product designs, we will not see substantial changes until the underlying profit incentives changes.\nBecause of the above it is almost certain that policies will have to be created by government to address these issues."
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "Notes",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\n\n\n\n\n2023-09-09\n\n\npytorch tensor cheatsheet\n\n\n\n\n2023-06-30\n\n\nanaconda cheatsheet\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-09-24_data_ethics/data_ethics_post.html",
    "href": "posts/2023-09-24_data_ethics/data_ethics_post.html",
    "title": "data ethics",
    "section": "",
    "text": "fastai book chapter 3 - janf - 2023"
  },
  {
    "objectID": "posts/2023-09-24_data_ethics/data_ethics_post.html#why-do-data-ethics-matter",
    "href": "posts/2023-09-24_data_ethics/data_ethics_post.html#why-do-data-ethics-matter",
    "title": "data ethics",
    "section": "Why do Data Ethics Matter",
    "text": "Why do Data Ethics Matter\nEverybody who is training models needs to consider how their models will be used, and consider how to best ensure that they are used as positively as possible. There are things you can do. And if you don’t do them things can go pretty badly. In general there are many negative societal consequences linked to AI an machine learning being observed today (bugs, flawed feedback loops, biases). It’not just a moral burden to consider sometimes there a legal burdens also. As example the first person who was jailed in the Volkswagen diesel scandal was the engineer not the manager. There is no final solution to ensure your work is used the right way. But with the right questions, you can at the very least ensure that the right issues are being considered. And you can so “no” to questionable pieces of work if their moral aspects don’t align."
  },
  {
    "objectID": "posts/2023-09-24_data_ethics/data_ethics_post.html#topics-in-data-ethics",
    "href": "posts/2023-09-24_data_ethics/data_ethics_post.html#topics-in-data-ethics",
    "title": "data ethics",
    "section": "Topics in Data Ethics",
    "text": "Topics in Data Ethics\nData ethics is a big field. This summery doesn’t cover everything. The following are relevant topics to consider:\n\nRecourse and Accountability\nIn a complex system, it is easy for no one person to feel responsible for outcomes. While this understandable, it does not lead to good results. To hinder big errors you need Recourse and Accountability. An additional reason why recourse is so necessary is that data often contains errors. Mechanism for audits and error correction are crucial and should be considered by by practitioners.\n\n\nFeedback Loops\nFeedback loops describe how an algorithm can interact with its environment to make predictions that reinforce action taken in the real world, which lead to predictions even more pronounced in the sam direction. Part of this problem is the driving metric of the algorithm. An algorithm has a metric to optimize, it will do everything it can to optimize their result. This can lead to all kinds of edge cases, and humans interacting with a system will search for, find, and exploit thees edge cases and feedback loops for their advantage. This behavior of feedback loops and tendencies for optimization can happen. As practitioner you should keep that in your mind and either anticipate a feedback loop and take positive action to break it when it happens.\n\n\nBias\nBias in machine learning can come from multiple sources. In this section we summarize the types of bias that are most helpful for machine learning projects.\n\nHistorical bias\n\nHistorical bias comes from the fact that people are biased, processes are biased, and society is biased. It is fundamental, structural issue with the first step of the data generation process and can exit even give perfect sampling and feature selection.\n\nMeasurement bias\n\nMeasurement bias can occur when our model makes mistakes because we are measuring the wrong thing, or measuring it in the wrong way, or incorporating that measurement into the model inappropriately.\n\nAggregation bias\n\nAggregation bias occurs when models do not aggregate data in a way that incorporates all of the appropriate factors, or when a model does not include the necessary interaction terms, nonlinearities, or so froth.\n\nRepresentation bias\n\nWhen the model emphasize some property of the data as it seemingly has the closet correlation with the prediction, even though that might not be the truth.\n\nEvaluation bias\n\nEvaluation bias occurs when the benchmark data used for a particular task does not represent the use population. A model is optimized on its training data, but its quality is often measured on benchmarks. These benchmark encourages the development and deployment of models that perform well only on the subset of the data represented by the benchmark data.\n\nDeployment bias\n\nDeployment bias arises when there is a mismatch between the problem a model is intended to solve and the way in which it is actually used. This often occurs when a system is built an evaluated as if were fully autonomous, while in reality, it operates in a complicated sociotechnical system moderated by human decision-makers.\n\n\nAddressing different types of bias\nDifferent types of bias require different approaches for mitigation. All datasets contain bias. There is no such thing as a complete debiased dataset. Many researchers in the field have been converging on a set of proposals to enable better documentation of the decisions, context, and specifics about how and why a particular dataset was created, what scenarios it is appropriate to use in, and what the limitations are. This way, those using a particular dataset will not be caught off guard by its biases and limitations.\nConsider these points when working with machine learning algorithms:\n\nMachines learning can create feedback loops\n\nSmall amounts of bias can rapidly increase exponentially because of feedback loops.\n\nMachine learning can amplify bias\n\nHuman bias can lead to larger amounts of machine learning bias.\n\nAlgorithms and humans are used differently\n\nHuman decisions makers and algorithmic decision makers are not used in a plug-and-play interchangeable way in practice. These examples are given in the list on the next page.\n\nTechnology is power\n\nAnd with that comes responsibility."
  },
  {
    "objectID": "posts/2023-09-24_data_ethics/data_ethics_post.html#disinformation",
    "href": "posts/2023-09-24_data_ethics/data_ethics_post.html#disinformation",
    "title": "data ethics",
    "section": "Disinformation",
    "text": "Disinformation\nDisinformation is not necessarily about getting someone to believe something false, but rather often used to sow disharmony and uncertainty, and to get people to give up on seeking the truth. Is can often contain some seeds of truth, of half-truth taken out of context.\nWith machine learning disinformation can be created cheaper and at a larger scale. Trough autogenerated text machine learning can be used to create coordinated campaigns of inauthentic behavior. For instance, fraudulent accounts may try to make it seem like many people hold a particular viewpoint."
  },
  {
    "objectID": "posts/2023-09-24_data_ethics/data_ethics_post.html#addressing-ethical-issues",
    "href": "posts/2023-09-24_data_ethics/data_ethics_post.html#addressing-ethical-issues",
    "title": "data ethics",
    "section": "Addressing Ethical Issues",
    "text": "Addressing Ethical Issues\nThe issues raised within data ethics are often complex and interdisciplinary, but it is crucial that we work to address them. So what can we do?\n\nAnalyze a Project You Are Working On\n\nConsider the ethical implication of your work. Question to ask?\n\nShould we even be doing this?\nWhat bias is in the data?\nCan the code and data be audited?\nWhat processes are in place to handle appeals or mistakes?\n\n\n\n\nProcesses to Implement\n\nConcrete practices to implement to proactively search for ethical risks.\n\nExpanding the ethical circle to include the perspectives of a variety of stakeholder.\nConsult interests, desires, skills, experiences, and values that maybe were simply assumed.\nConsider all stakeholders and their interests. Also the individuals that will be indirectly affected by our products.\nAlso consider terrible people. Who might use this product in ways we didn’t expected.\n\n\n\n\nThe Power of Diversity\n\nWhen everybody on a team has similar backgrounds, they are likely to have similar blind spots around ethical risks. Diversity can lead to problems being identified earlier, and a wider range of solutions being considered.\n\n\n\nFairness, Accountability, and Transparency\n\nTreat fairness as a central concern rather than an afterthought. Don’t sidestep deeper questions about fairness, accountability and transparency.\n\n\n\nRegulation, Rights and Policy\n\nPolicies are an appropriate tool for addressing data ethics issues when is likely that design fixes, self regulation and technical approaches to addressing problems, involving ethical uses of Machine Learning are not working. While such measures can be useful, they will not be sufficient to address the underlying problems that have led to our current state. For example, as long as it is incredibly profitable to create addictive technology, companies will continue to do so, regardless of whether this has the side effect of promoting conspiracy theories and polluting our information ecosystem. While individual designers may try to tweak product designs, we will not see substantial changes until the underlying profit incentives changes. Because of the above it is almost certain that policies will have to be created by government to address these issues."
  },
  {
    "objectID": "posts/2023-06-30_welcome/welcome_post.html",
    "href": "posts/2023-06-30_welcome/welcome_post.html",
    "title": "hello world",
    "section": "",
    "text": "flora - janf - 2020\n\n\n\nThis is the first post on this blog. Seavas!\nHello, I’m Jan F. from west austria 🇦🇹 .  I like to learn and create new things. Here i take notes about these processes or outcomes ✌️"
  },
  {
    "objectID": "posts/2023-08-14_your_deep_learning_journey/subsite/your_deep_learning_journey_questions.html",
    "href": "posts/2023-08-14_your_deep_learning_journey/subsite/your_deep_learning_journey_questions.html",
    "title": "Questions - Chapter 1",
    "section": "",
    "text": "Back to blog post\n\n\n\nfastai book chapter 1\n\n\n\n\n\n\n\n\nLinks\n\n\n\n\nSource: Fastbook Chapter 1 questionnaire solutions (wiki)\n\n\n\n What is Deep Learning? \nDeep learning is a computer technique to extract anf transform data for that it uses multiple layers of neural networks. The layers are trained by alogrithms that minimze thier accuracy. In this way, the network learn to perform a specified task.\n Do you need these for Deep Learning?\n\nLots of Math (True/False)\nLots of Data (True/False)\nLots of expensive computers (True/False)\nA Phd (True/False) \nLots of Math (False)\nLots of Data (False)\nLots of expensive computers (False)\nA Phd (False)\n\n Name five areas where deep learning is now the best tool in the world? \n\nMedicine\n\nCancer detection\n\nSecurity\n\nSpam detection\n\nComputer vision\n\nClassification of Images\n\nPlaying Games\n\nChess, Go\n\nNatural language processing (NLP)\n\nsummerizing documents, classifying documents\n\n\n What was the name of the first device that was based on the principle of the artificial neuron? \nMark 1-Perceptron.\nFrank Rosenblatt further developed the artificial neuron to give it the ability to learn. Based on this he worked on building the first device that actually used these principles, the Mark ! Perceptron.\n Based on the book of the same name, what are the requirements for parallel distrubted processing? \nBased on the definition parallel distributed processing the requirements are: 1. A set of processing units 2. A stat of activation 3. An output function for each unit 4. A pattern of connectivity among units 5. A propagation rule for propagating pattern of activities through th network of conductivities. 6. An activation rule for combining the inputs impinging on a unit with the current state of that unit to produce an output for the unit. 7. A learning rule whereby patterns of connectivity are modified by experience. 8. An environment within which the system must operate.\n What were the tow theoretical misunderstandings that held back the field of neural networks? \nIn 1969, Marvin Minsky an Seymour Papert demonstrated in their book, “Perceptrons”, that a single layer of artificial neurons cannot learn simple, critical mathematical functions like XOR logic gate. While they subsequently demonstrated in the same book that additional layers can solve this problem, only the first insight was recognizes, leading to the start of the first AI winter.\nIn the 1980’s models with tow layers were being explored. Theoretically, it is possible to approximate any mathematical function using two layers of artificial neurons. However, in practices, these networks were too big and too slow. While it was demonstrated that adding additional layers improved performance, this insight was not acknowledged, and the second AI winter began. In this past decade, with increased data availability, and improvements in computer hardware (both in CPU performance but more importantly in GPU performance), neural networks are finally living up to its potential.\n What is a GPU? \nA GPU is a Graphics Processing Unit. They were specializes processing units designed to accelerate graphics redndering for gaming. Thanks to their unique capability to efficiently parallelize massive distributed computational processes, GPUs have successfully been applied to applications beyond their original remit. These optimizations and capability’s allow us to run and train neural networks hundreds of times faster than a regular CPU.\n Open a notebook and execute a cell containing: 1+1. What happens? \nIn Jupyter Notebook we can create code cells in an interactive manner. When we execute a cell containing some code, the code runs by Python and the output is displayed under the curren code cell.\nCode Cell: 1+1 Output under der Code Cell: 2\n Follow through each cell of the stripped version of the notebook for this chapter. Before executing each cell, guess what will happen. \nToDo\n Complete the Jupyter Notebook online appendix (https://oreil.ly9uPZe). \nToDo\n Why is it hard to use traditional computer program to recognize images in a photo? \nWhen creating a normal computer program think about some steps and translate them into code. As Example we can write an algorithm to sort a list. But for recognizing an image or object it is tricky. We as human subconsciously learned a lot of features defining one object from an other. It is very difficult to manually code these complex patterns of shapes, textures, colors, and other features to recognize different objects and images.\n What did Samuel mean by “weight assignment”? \n“weight assignment” refers to the current values of the model parameters. Arthur Samuel further mentions an “ automatic means of testing the effectiveness of any current weight assignment ” and a “ mechanism for altering the weight assignment so as to maximize the performance ”. This refers to the evaluation and training of the model in order to obtain a set of parameter values that maximizes model performance.\n What term do we normally use in deep learning for what Samuel called “weights”? \nWeights are also called parameters.\n Draw a picture that summarizes Samuel`s view of a machine learning model. \n\n\n\nmachine learning model\n\n\n Why is it hard to understand why a deep learning model makes a particular prediction? \nAll kinds of machine learning models (including deep learning and traditional statical models) can be challenging to fully understand. Think of a linear regression model. Simply, we have some input variables/data that are multiplied by some weights, giving us an output. We can understand which variables are more important and which are less important based on their weights. A similar logic might apply for a small neural network with 1-3 layers. However, deep neural networks have hundreds, if not thousands, of layers. It is hard to determine which factors are important in determining the final output. The neurons in the network interact with each other, with the outputs of some neurons feeding into other neurons. Altogether, due to the complex nature of deep learning models, it is very difficult to understand why a neural network makes a given prediction.\nHowever, in some cases, recent research has made it easier to better understand a neural network’s prediction. For example, as shown in this chapter, we can analyze the sets of weights and determine what kind of features activate the neurons. When applying CNNs to images, we can also see which parts of the images highly activate the model. We will see how we can make our models interpretable later in the book.\n What is the name of the theorem that shows that a neural network can solve any mathematical problem to any level of accuracy? \nIf you regard a neural network as a mathematical function, it turns out to be a function which is extremely flexible depending on its weights. A mathematical proof called the universal approximation theorem shows that this function can solve any problem to any level of accuracy, in theory.\n What do you need in order to train a model? \nYou need a architecture, a general template for how that kind of model works internally. For training/fitting the model you need data to specialize the general architecture. To define how well a model does on a single prediction. We need to define a loss function, which determines how good the model performs. Do determine the loss we need labeled data, data indicating what it represent.\n How could a feedback loop impact the rollout of a predictive policing model? \nIn a predictive policing model, we might end up with a positive feedback loop, leading to a highly biased model with little predictive power. For example, we may want a model that would predict crimes, but we use information on arrests as a proxy . However, this data itself is slightly biased due to the biases in existing policing processes. Training with this data leads to a biased model. Law enforcement might use the model to determine where to focus police activity, increasing arrests in those areas. These additional arrests would be used in training future iterations of models, leading to an even more biased model. This cycle continues as a positive feedback loop.\n Do we always have to use 224x224-pixel images with the cat recogintion? \nNo, This is the standard size for historical reasons (old pretrained models require this size exactly), but you can pass pretty much anything. If you increase the size, you’ll often get a model with better results (since it will be able to focus on more details), but at the price of speed and memory consumption; the opposite is true if you decrease the size.\n What is the difference between classification and regression? \n\nClassification A classification model is one that attempts to predict a class, or category. That is, it’s predicting from a number of discrete possibilities.\nRegression A regression model is one that attempts to predict one or more numeric quantities, such as a temperature or a location.\n\n What is a validation set? What is a test set? Why do we need them? \n\nTraining set The data used for fitting the model, does not include any data from the validation set. (If there is enough data 80% is used for training)\nValidation set A set of data held out from training, used only for measuring how good the model is. (If there is enough data 20% is used for validation)\nTest set As we hold the validation data back from the training process, we can hold back a test set data even from ourselves. It cannot be used to improve the model, it can only be used to evaluate the model at the very end. (Take out some data for testing and split the rest to 80% for training and 20% for validation)\n\n What will fastai do if you don’t provide a validation set? \nIt will automatically create a validation dataset if no validation set is provided. By default fastai takes out 20% that is held out is randomly.\n Can we always use a random sample for a validation set? Why or why not? \nA good validation or test set should be representative of new data you will see in the future. Sometimes this isn’t true if a random sample is used. For example, for times series data, selecting sets randomly does not make sense. Instead, defining different time periods for the train, validation, and test set is a better approach.\n What is overfitting? Provide an example. \nOverfitting is the single most important and challenging issue when training for all machine learning. Training a model in such a way that it remembers specific features of the input data, rather than generalizing well to data not seen during training.\n What is a metic? How does it differ from loss? \nThe concept of a metric may remind you of loss, but there is an important distinction. The entire purpose of loss is to define a “measure of performance” that the training system can use to update weights automatically. In other words, a good choice for loss is a choice that is easy for stochastic gradient descent to use. But a metric is defined for human consumption, so a good metric is one that is easy for you to understand, and that hews as closely as possible to what you want the model to do. At times, you might decide that the loss function is a suitable metric, but that is not necessarily the case.\n How can pretrained models help? \nA model that has weights that have already been trained on some other dataset is called a pretrained model. You should nearly always use a pretrained model, because it means that your model, before you’ve even shown it any of your data, is already very capable. For instance, parts of pretrained models will handle edge, gradient, and color detection, which are needed for many tasks. Using pretrained models is the most important method we have to allow us to train more accurate models, more quickly, with less data, and less time and money.\n What is the “head” of a model? \nThe head of a model is the part that is newly added to be specific to the new dataset. So the other layers which were not replaced where already trained for what the model war originally thought for.\n What kinds of features do the early layers of a CNN find? How about the later layers? \nThe early layers learn simple features corners, edges, lines, circles. The later layers learn more advanced features like eyes, wheels, outlines of animals trees or humans.\n Are image models useful only for photos? \nNope! Image models can be useful for other types of images like sketches, medical data, etc.\nHowever, a lot of information can be represented as images . For example, a sound can be converted into a spectrogram, which is a visual interpretation of the audio. Time series (ex: financial data) can be converted to image by plotting on a graph. Even better, there are various transformations that generate images from time series, and have achieved good results for time series classification. There are many other examples, and by being creative, it may be possible to formulate your problem as an image classification problem, and use pretrained image models to obtain state-of-the-art results!\n What is an architecture? \nThe architecture is the template or structure of the model we are trying to fit. It defines the mathematical model we are trying to fit.\n What is segmantaion? \nCreating a model that can recognize the content of every individual pixel in an image is called segmentation. The result is a segmentation (mask) for which parts of the image correspond to the given label.\n What is y_range used for? When do we need is? \ny_range is being used to limit the values predicted when our problem is focused on predicting a numeric value in a given range (ex: predicting movie ratings, range of 0.5-5).\n What are “hyperparameters”? \nTraining models requires various other parameters that define how the model is trained. For example, we need to define how long we train for, or what the learning rate is used (how fast the model parameters are changed). These sorts of parameters are hyperparameters.\n What’s the best way to avoid failures when using AI in an organization? \n\nMake sure a training, validation, adn testing set is defined properly in order to evaluate the model in an appropriate manner.\nTry out a simple baseline, which future models should hopefully beat. Or even this simple baseline may be enough in some cases."
  },
  {
    "objectID": "posts/2023-10-07_under_the_hood_training_a_classifier/subsite/under_the_hood_training_a_digit_classifier_questions.html",
    "href": "posts/2023-10-07_under_the_hood_training_a_classifier/subsite/under_the_hood_training_a_digit_classifier_questions.html",
    "title": "Questions - Chapter 4",
    "section": "",
    "text": "Questions - Chapter 4\n\n\n\n\n\n\nBack to blog post\n\n\n\nfastai book chapter 4\n\n\n\n\n\n\n\n\nLinks\n\n\n\n\nSource: Fastbook Chapter 4 questionnaire solutions (wiki)\n\n\n\n\n\nCode\nfrom fastai.vision.all import *\n\n\n How is a grayscale image represented on a computer? How about a color image? \nImages are represented by arrays with pixel values representing the content of the image. For greyscale images, a 2-dimentional array is used with the pixeles representing the grayscale values, with a range of 256 integers. A value of 0 would represent white and a value of 255 represent black, and different shades of greyscale in between. For color images, three color channels (red,green,blue) are typicall used, with a separate 256-range 2D array used for each channel. A pixel of 0 again represent white, with 255 representing solid red, green or blue. The 2D arrays from a final 3D array (rank 3 tensor) representing the color image.\n How are the files an folders in the MNIST_SAMPLE dataset structured? Why? \nThere are two subfolders, train and valid, the former contains the data for modeling training, the latter contains the data for validating model performance after each training step. Evaluating the model on the validation set serves tow purposes: a.) to report a human interpretable metric such as accuracy (in contract to the often abstract loss functions used for training), b.) to facilitate the detection of overfitting by evaluating the model on da dataset it hasn’t been trained on (in short, an overfitting model performs increasingly well on the training set but decreasingly so an the validation set). Of course, every practitioner could generate their own train/validation-split of the data. Public datasets are usually pre-split to simplifying comparing results between implementations/publications.\n Explain how the “pixel similarity” approach to classifying digits works. \nIn the pixel similarity approach, we generate an archetype for each class we want to identify. In our case, we want to distinguish images of 3’s from images of 7’s. We define the archetypical 3 as the pixel-wise mean values of all 3’s in the training set. Analog for the 7’s. You can visualize the tow archetypes and see that they are in fact blurred version of the number they represent. In order to tell if previously unseen image is a 3 or a 7, we calculate its distance to the tow archetypes (here: mean pixel-wise absolute difference). We say the new images are a 3 if the distance to the archetypical 3 is lower that tow the archetypical 7.\n What is a list comprehension? Create one now that selects odd numbers from a list and doubles them. \nList (arrays in other programming languages) are often generated using a for-loop. A list comprehension in Python is condensing the creation of list using a for-loop into a single expression. List comprehension will also often include if clauses for filtering.\nlst_in = range(10)\nlst_out = [2*el for el in lst_in if el%2==1]\nlist = []\nfor el in lst_in:\n    if el%2==1:\n        lst_out.append(2*el)\n        \nlst_out\n What is a rank-3 tensor? \n\n\nCode\na = torch.Tensor(list(range(1,10))).view(3,3);\n\nprint(a)\n\n\ntensor([[1., 2., 3.],\n        [4., 5., 6.],\n        [7., 8., 9.]])\n\n\n\n\nCode\nb = 2 * a\n\nprint(b)\n\n\ntensor([[ 2.,  4.,  6.],\n        [ 8., 10., 12.],\n        [14., 16., 18.]])\n\n\n\n\nCode\nb[1:,1:]\n\n\ntensor([[10., 12.],\n        [16., 18.]])\n\n\n What is broadcasting? \nSientific/numerical Python packages like NumPy and PyTorch will often implement broadcasting that often makes code easier to write. In the case of PyTorch, tensor with saller rank are expanded to have the same size as the larger tensor. In this way, operations can be performed between tensor with different rank.\n Are metrics generally calculated using the trining set or the validation set? Why? \nMetrics are generally calculated on a validation set. As the validation set is unseen data for the model, evaluating the metrics on the validation set is better in order to determine if there is any overfitting and how well the model might generalize if given similar data.\n What is SGD? \nSGD, or stochastic gradient decent, is an optimization algorithm. Specifically, SGD is an algorithm that will update the parameters of a model in order to minimize a given loss function that was evaluated on the prediction and target. The key idea behind SGD (and many optimization algorithms, for that matter) is that the gradient of the loss function provides and indication of how that loss function changes in the parameter space, which we use to determine how best to update the parameters in order to minimize the loss function. This is what SGD does.\n Why does SGD use mini-batches? \nWe need to calculate our loss function (and our gradient) on one or more data points. We cannot calculate on the whole dataset due to compute limitations and time constraints. If we iterated through each data point, however, the gradients will be unstable and imprecise, and is not suitable for training. As a compromise, we calculate the average loss for a small subset of the dataset at a time. This subset is called a mini-batch. Using a mini-batches are also more computationally efficient that single items on a GPU.\n What are the seven steps in SGD for machine learning? \n\nInitialize the weights.\nUse the weights to predict.\nBased on the prediction, calculate the loss (how good the model is).\nCalculate the gradient which measures for each weight how changing that weight would change the loss.\nStep all the weights based on that calculation.\nGo back to step 2.\nIterate until you decide to stop the training process (for instance, because the model is good enough or you don’t want to wait any longer).\n\n How do we initialize the weights in a model? \nWe initialize the parameters to random values.\n What a loss? \nThe loss gives a number of how good the effectiveness of a current weight assignment is in terms of actual performance. The loss function should return a number that is small if the performance of the model is good. (the standard approach ist to teat a small loss as good and a large loss as bad)\n Why can’t we use a high learning rate? \nThe size of the step we take when applying SGD to update the parameters of the model.The learning rate is often a number between 0.001 and 0.1, although is could be anything. Often people select a learning rate just by typing a few, and finding which results in the best model after training.\n What is a gradient? \nThe derivative of the loss with respect to some parameter of the model. The gradients are calculated in the backpropagation (this function could also be called calculate_gradients). The gradients tell us only the slope of the function, they don’t tell exactly how far to adjust the parameters. But they give us some idea of how far: if the slope is very large, that may suggest that we have more adjustments to do, whereas it the slope is very small, that may suggest that we are close to the optimal value.\n Do you need to know how to calculate gradients yourself? \nManual calculation of the gradients are not required, as deep learning libraries will aromatically calculate the gradients for you. This feature is known as automatic differentiation. In PyTorch, if requires_grad=True, the gradients can be returned by calling the backward method (backpropagation).\n Why can’t we use accuracy as a loss function? \nA loss function needs to change as the weights are being adjusted. Accuracy only changes if the predictions of the model change. So if there are slight changes to the model, say it improves confidence in a prediction, but does not change the prediction, the accuracy will still not change. Therefore, the gradients will be zero everywhere except when the actual predictions change. The model therefore cannot learn form the gradients equal to zero, and the model’s weights will not update and will not train. A good loss function gives a slightly better loss when the model gives slightly better prediction. Slightly better predictions mean if the model is more confident about the correct prediction. For example, predicting 0.9 vs 0.7 for a probability the loss function needs to reflect that.\n Draw the sigmoid function. What is special about its shape? \n\n\nCode\n\nfrom fastai.vision.all import *\nfrom fastbook import *\n\ndef plot_function(f, tx=None, ty=None, title=None, min=-2, max=2, figsize=(6,4)):\n    x = torch.linspace(min,max,100)\n    fig,ax = plt.subplots(figsize=figsize)\n    ax.plot(x,f(x))\n    if tx is not None: ax.set_xlabel(tx)\n    if ty is not None: ax.set_ylabel(ty)\n    if title is not None: ax.set_title(title)\n\nplot_function(torch.sigmoid, title='sigmoid', min=-4,max=4)\n\n\n\n\n\n\n\n\n\nSigmoid function is a smooth curve that squishes all values into values between 0 and 1. Most loss functions assume that the model is outputting some form of a probability or confidence level between 0 and 1 so we use the sigmoid function at the end of the model in order to always output a number between 0 and 1.\n What is the difference between a loss function and a metric? \nMetric drive human understanding and the loss is to drive automated learning.\nloss: the loss must be a function that has a meaningfull derivative. It can’t have big flat sections and large jumps, but instead must be reasonably smooth. This is why we use loss functions that would respond to small changes in confidence level. The loss function is calculated for each item in our dataset, and then at the end of an epoch, the loss values are all averaged and the overall mean is reported for the epoch.\nmetric: Metrics are the values that are printed at the end of each epoch that tell us how our model is doing. It is important that we learn to focus on these metrics, rather than the loss, when judging the performance of a model.\n What is the function to calculate new weights using a learning rate? \n What does the DataLoader class do? \n Write pseudocode showing the basic steps taken in each epoch for SGD. \n Create a function that, if passed two arguments [1,2,3,4] and ‘abcd’ returns [(1,‘a’),(2,‘b’),(3,‘c’),(4,‘d’)]. What is special about that output data structure? \n What does view do in PyTorch? \n What are the bias parameters in a neural network? Why do we need them? \n What does the @ operator do in Python? \n What does the backward method do? \n Why do we have to zero the gradients? \n What information do we have to pass to Learner? \n Show Python or pseudocode for the basic steps of a training loop. \n What is ReLU? Draw a plot of it for values from -2 to +2. \n What is a activation function? \n What’s the difference between F.rulu and nn.ReLUJ? \n The universal approximation theorem shows that any function can be approximated as closely as needed using just one nonlinearity. So why do we normally use more?"
  },
  {
    "objectID": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html",
    "href": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html",
    "title": "from model to production",
    "section": "",
    "text": "fastai book chapter 2 - janf - 2023"
  },
  {
    "objectID": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html#drivetrain-approach",
    "href": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html#drivetrain-approach",
    "title": "from model to production",
    "section": "Drivetrain Approach",
    "text": "Drivetrain Approach\nData products get more and more complex so we sometimes lose sight of the real problem we are trying to solve. The Drivetrain Approach aims to better couple the data science to the real business needs/real world problem and to use data not just to generate more data but to use data to produce actionable outcomes.\n\n\n\nDrive Train Approach - Designing great data products\n\n\n\n(Defined Objective) First we must define the objective / goal\n(Levers) Specify what inputs/levers of the system we control that influence the final outcome\n(Data) Determine what data to collect\n(Models) Building the predictive models"
  },
  {
    "objectID": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html#dataloader-dataloaders-datablock",
    "href": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html#dataloader-dataloaders-datablock",
    "title": "from model to production",
    "section": "DataLoader, DataLoaders, DataBlock",
    "text": "DataLoader, DataLoaders, DataBlock\n\nDataBlock is the data pipeline. A template that we create that has no data, but defines all the context on how to work with it. For example, how to split the data, the data types of or features and targets/labels, how to extract the labels from the underlying data (folders).\nDataLoader doesn’t care about preparing data, it expects the data is ready to go and only cares about how to load the data (e.g. whether in parallel or in a single process) as well as feeding the data to the model in batches (i.e. batch size)\nDataLoaders is a thin wrapper for more than one DataLoader.\n\nA DataLoaders, is a thin class that automatically generates multiple DataLoader objects based on the rules specified in our DataBlock\nExample of a DataLoaders with a DataBlock Api:\nbears = DataBlock(\nblocks =(ImageBlock, CategoryBlock),\nget_items=get_image_files,\nsplitter=RandomSplitter(valid_pct=0.2, seed=42),\nget_y=parent_label,\nitem_tfms=Resize(128)\n)\nThese are the main parameters of the DataBlock:\n\nblocks: is where you define the types of input and output data your model will work with. The first one is the independent (input) and the second one is dependent target. Usually you will have two input and output but you can have multiple input/output variables.\nget_items: tells fastai how and where to get the files/data when needed.\nsplitter: how to split the data in training and validation set. Seeds are optional for replicability.\nget_y: how to extract the target/label/variable (dependent) from the data."
  },
  {
    "objectID": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html#data-augmentation",
    "href": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html#data-augmentation",
    "title": "from model to production",
    "section": "Data Augmentation",
    "text": "Data Augmentation\nData augmentation refers to creating random variations of our input data, such that they appear different but do not change the meaning of the data. Examples of common data augmentation techniques for images are rotation, flipping, perspective warping, brightness changes and contrast changes. Data augmentation is useful for the model to better understand the basic concept of what an object is and how the objects of interest are represented in images. Therefore, data augmentation allows machine learning models to generalize better. This is especially important when it can be slow and expensive to label data."
  },
  {
    "objectID": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html#clean-the-data-with-you-model",
    "href": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html#clean-the-data-with-you-model",
    "title": "from model to production",
    "section": "Clean the Data with you Model",
    "text": "Clean the Data with you Model\nOn method to look at your model is visualizing it in a confusion matrix:\n\n\n\nconfusion matrix bears\n\n\nFor this example the rows represent all the black, grizzly and teddy bears in our dataset, respectively. The columns represent the images that the model predicted as black, grizzly and teddy bears, respectively. Therefore, the diagonal of the matrix shows the images that were classified correctly, and the off-diagonal cells represent those that were classified incorrectly.\nA confusion matrix is helpful to see where exactly our errors occurring 1. You can see if there are datasets errors (images with no bears or entries labeled incorrectly) 2. Or you can see if there is problem with the model (images with unusual lighting or blurred images)\nThe intuitive approach to doing data cleaning is to do it before you train a model. But you can also train a quick and simple model first, and then use it to help us with data cleaning. fastai includes a handy GUI for data cleaning called ImageClassifierCleaner that allows you to choose a category and the training versus validation set and view the highest-loss images (in order), along with menus to allow images to be selected for removal or relabeling:\ncleaner = ImageClassifierCleaner(learn)\ncleaner"
  },
  {
    "objectID": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html#avoid-disasters",
    "href": "posts/2023-08-18_from_model_to_production/from_model_to_production_post.html#avoid-disasters",
    "title": "from model to production",
    "section": "Avoid Disasters",
    "text": "Avoid Disasters\nYou should always have in mind that it’s difficult to understand the behavior of a deep learning model. In a neural network the behavior emerges from the models attempt to match the training data, rather than being exactly defined.\nOne general problem is the out-of-domain data problem. That is to say, there may be data that our model sees in production that is very different from what it saw during training. There isn’t a complete technical solution to this problem, instead, we have to be careful about rolling out a deep learning model.\nAnother problem ist a domain is a domain shift, whereby the type of data that our model sees changes over time. For instance, an insurance company may use a deep learning model ass part of its pricing and risk algorithm, but over time the types of customers the company attracts and the types of risks it represents may change so much that the original training data is no longer relevant.\nHigh-Level approach to mitigate the risks on a roll-out\n\n\n\nMitigate risk on rollout"
  },
  {
    "objectID": "index.html#blog-posts",
    "href": "index.html#blog-posts",
    "title": "janf",
    "section": "blog posts",
    "text": "blog posts\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\ndata ethics\n\n\n\n\n\nfastai book chapter 3\n\n\n\n\n\n2023-09-24\n\n\n8 min\n\n\n\n\n\n\n\n\n\n\n\n\nfrom model to production\n\n\n\n\n\nfastai book chapter 2\n\n\n\n\n\n2023-08-18\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\nyour deep learning journey\n\n\n\n\n\nfastai book chapter 1\n\n\n\n\n\n2023-08-14\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\nhello world\n\n\n\n\n\nThe first post on this blog\n\n\n\n\n\n2023-06-30\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "notes/2023-06-30_anaconda _cheatsheet/anaconda_cheatsheet_note.html",
    "href": "notes/2023-06-30_anaconda _cheatsheet/anaconda_cheatsheet_note.html",
    "title": "anaconda cheatsheet",
    "section": "",
    "text": "Anaconda is a distribution of the Python for sientific computing (data sience, machine learning applications, large-scale data processing, predictive analytics, etc.), that aims to simplify package management and deployment.\nConda Documentation\nAnaconda (Python distribution)\n\n\n\n\nconda env list\n\n\n\nconda create --name ENV_NAME python=x.x\n\n\n\nconda enc create --file=environment.yml\n\n\n\nsource activate ENV_Name\nsource deactivate\n\n\n\nconda env remove --name ENV_NAME\n\n\n\nconda env export &gt; environment.yml\n\n\n\nconda create --clone ENV_NAME --name NEW_ENV_NAME\n\n\n\n\n\n\nconda search PACKAGE_NAME\n\n\n\nconda install PACKAGE_NAME\nconda install -c CHANNEL_NAME PACKAGE_NAME\n\n\n\nconda update PACKAGE_NAME\n\n\n\nconda list\n\n\n\n\n\n\nconda config --show channels\n\n\n\nconda config --aa channels CHANNEL_NAME\n\n\n\n\n\n\nconda info\n\n\n\nconda update conda"
  },
  {
    "objectID": "notes/2023-06-30_anaconda _cheatsheet/anaconda_cheatsheet_note.html#what-is-anaconda",
    "href": "notes/2023-06-30_anaconda _cheatsheet/anaconda_cheatsheet_note.html#what-is-anaconda",
    "title": "anaconda cheatsheet",
    "section": "",
    "text": "Anaconda is a distribution of the Python for sientific computing (data sience, machine learning applications, large-scale data processing, predictive analytics, etc.), that aims to simplify package management and deployment.\nConda Documentation\nAnaconda (Python distribution)\n\n\n\n\nconda env list\n\n\n\nconda create --name ENV_NAME python=x.x\n\n\n\nconda enc create --file=environment.yml\n\n\n\nsource activate ENV_Name\nsource deactivate\n\n\n\nconda env remove --name ENV_NAME\n\n\n\nconda env export &gt; environment.yml\n\n\n\nconda create --clone ENV_NAME --name NEW_ENV_NAME\n\n\n\n\n\n\nconda search PACKAGE_NAME\n\n\n\nconda install PACKAGE_NAME\nconda install -c CHANNEL_NAME PACKAGE_NAME\n\n\n\nconda update PACKAGE_NAME\n\n\n\nconda list\n\n\n\n\n\n\nconda config --show channels\n\n\n\nconda config --aa channels CHANNEL_NAME\n\n\n\n\n\n\nconda info\n\n\n\nconda update conda"
  }
]